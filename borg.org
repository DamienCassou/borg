#+TITLE: Borg User Manual
#+AUTHOR: Jonas Bernoulli
#+EMAIL: jonas@bernoul.li
#+DATE: 2016
#+LANGUAGE: en

#+TEXINFO_DIR_CATEGORY: Emacs
#+TEXINFO_DIR_TITLE: Borg: (borg).
#+TEXINFO_DIR_DESC: Assimilate Emacs packages as Git submodules
#+SUBTITLE: for version 0.1.0

#+OPTIONS: H:4 num:3 toc:2

* Copying
:PROPERTIES:
:COPYING:    t
:END:

#+BEGIN_TEXINFO
@ifnottex
The Borg assimilate Emacs packages as Git submodules.
@end ifnottex

@quotation
Copyright (C) 2016 Jonas Bernoulli <jonas@@bernoul.li>

You can redistribute this document and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any
later version.

This document is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.
@end quotation
#+END_TEXINFO

* Introduction

The Borg assimilate Emacs packages as Git submodules.

Borg is a bare-bones package manager for Emacs packages.  It provides
only a few essential features and should be combined with other tools
such as Magit, ~epkg~, ~use-package~, and ~auto-compile~.

Borg assimilates packages into the ~~/.emacs.d~ repository as Git
submodules.  An assimilated package is called a drone and a borg-based
~~/.emacs.d~ repository is called a collective.

* Getting started

To get started clone one of the available collectives to ~~/.emacs.d~.
Several different collectives are (or will become) available.  In this
manual we assume the use of the ~emacs.g~ collective, which already
assimilated a few drones in addition to ~borg~ itself, namely ~magit~,
~epkg~, ~use-package~, ~auto-compile~, ~git-modes~, ~diff-hl~, and their
dependencies.  These drones are not required by ~borg~ but their use is
highly recommended.

Alternatively you can use the ~bootstrap~ collective which contains only
the essentials: the ~borg~ drone, a ~Makefile~, and a very basic ~init.el~.

The ~emacs.g~ collective is available from three different locations:

- https://github.com/emacscollective/emacs.g
- https://gitlab.com/emacscollective/emacs.g
- https://bitbucket.org/emacscollective/emacs.g

Clone the repository from your prefered url to either ~~/.emacs.d~, or
for testing purposes to any other location.  Then fetch and build the
assimilated drones using ~make bootstrap~.

* Startup

The ~user-init-file~, ~~/.emacs.d/init.el~, has to contain a call to
~borg-initialize~.  It should also set ~package-enable-at-startup~ to ~nil~
unless you really want to use both ~borg~ and ~package~ at the same time.

- Function: borg-initialize

  This function initializes all assimilated drone modules.  For each
  drone module this adds the appropriate directories to the ~load-path~
  and ~Info-directory-list~, and loads the autoloads file if it exits.

  To skip these steps for a drone named DRONE, temporarily disabled it
  by setting the value of the Git variable ~submodule.DRONE.disabled~ to
  ~true~ in ~~/.emacs.d/.gitsubmodules~.

* Assimilation

A third-party package is assimilated by adding it as a submodule and,
if necessary, by configuring it in ~~/.emacs.d/init.el~.  Built-in
packages are assimilated merely by configuring them.

To begin the assimilation of a third-party package use the command
~borg-assimilate~, which adds the package's repository as a submodule,
and attempts to build the drone.  Building the drone can fail,
e.g. due to missing dependencies.  Failure to build a drone is not
considered as a failure to assimilate.

If building a drone fails, then a buffer with information about the
issue pops up.  If the failure is due to unsatisfied dependencies,
then assimilate those too, and then build any drone which previously
couldn't be build by using the Emacs command ~borg-build~ or ~make
lib/DRONE~.  Alternatively you can just rebuild everything using ~make
build~.

If you wish to avoid such complications, you should use the command
~epkg-describe-package~ before assimilating a package.  Among other
useful information, it also provides a dependency tree.

Once the packages have been added as submodules and the drones have
been build, the assimilation is completed by creating an assimilation
commit.

If you assimilate a single package, then it is recommended that you
use a message similar to this:

#+BEGIN_SRC undefined
  Assimilate foo v1.0.0
#+END_SRC

Or if one or more dependencies had to be assimilated, something like:

#+BEGIN_SRC undefined
  Assimilate foo and dependencies

  Assimilate foo v1.0.0
  Assimilate bar v1.1.0
  Assimilate baz v0.1.0
#+END_SRC

It's usually a good idea not to assimilate unrelated packages in the
same commit, but something like this might make sense:

#+BEGIN_SRC undefined
  Assimilate ido and extensions

  Assimilate flx               v0.6.1-3-gae0981b
  Assimilate ido-at-point      v1.0.0
  Assimilate ido-ubiquitious   v3.12-2-g7354d98
  Assimilate ido-vertical-mode v0.1.6-33-gb42e422
  Assimilate smex               3.0-13-g55aaebe
#+END_SRC

Version strings as those shown above can be optained using ~git
describe --tags~, or by looking inside the "Modules" section of the
Magit status buffer of the ~~/.emacs.d~ repository.

- Command: borg-assimilate drone url &optional force

  This command assimilates the drone named DRONE from URL.

  With a prefix argument it passes ~--force~ to ~git submodule add~.

- Command: borg-uninstall drone

  This command uninstalls the drone named DRONE.

- Command: borg-build drone

  This function builds the drone named DRONE.

- Function: borg-update-autoloads drone path

  This function updates the autoload files for the drone named DRONE
  in the directories in PATH.

- Function: borg-byte-compile drone path

  This function compiles the libraries for the drone named DRONE in
  the directories in PATH.

- Function: borg-makeinfo drone

  This function generates the Info manuals and the Info index for the
  drone named DRONE.

- Function: borg-batch-rebuild &optional quick

  This function rebuilds all assimilated drones in alphabetic order,
  except for Org which is rebuild first.  It also rebuilds ~init.el~ and
  ~USER-REAL-LOGIN-NAME.el~.

  This function is not intended for interactive use, but used to
  implement the ~make~ targets described in the following section.

  When optional QUICK is non-nil, then do not build drones for which
  ~gitmodule.DRONE.build~ is set, assuming those are the drones that
  take longer to be build.

- Function: borg-batch-rebuild-init

  This function rebuilds ~init.el~ and ~USER-REAL-LOGIN-NAME.el~.  It is
  not intended for interactive use.

* Updating drones

Borg does not provide an update command.  By not doing so, it empowers
you to update to exactly the commit you wish to update to, instead of
to "the" new version.

To determine the drones with you /might/ want to update, visit the Magit
status buffer of the ~~/.emacs.d~ repository and press ~f m~ to fetch
inside all submodules.  After you have done so, and provided there
actually are any modules with new upstream commits, a section titled
"Modules unpulled from @{upstream}" appears.

Each subsection of that section represents a submodule with new
upstream commits.  Expanding such a subsection lists the new upstream
commits.  These commits can be visited by pressing ~RET~, and the status
buffer of a submodule can be visited by pressing ~RET~ while point is
inside the heading of the respective submodule section.  To return to
the status buffer of ~~/.emacs.d~ press ~q~.

Inside the status buffer of a submodule, you can pull the upstream
changes as usual, using ~F u~.  If you wish you can inspect the changes
before doing so, and you can also choose to check out another commit,
instead of the upstream ~HEAD~.

Once you have "updated" to a new commit, you should also rebuild the
drone using the command ~borg-build~.  This may fail, e.g. due to new
dependencies.

Once you have resolved all issues you should create an "update
commit".  You can either create one commit per updated drone or you
can create a single commit for all updated drones, which ever you find
more appropriate.  However it is recommended that you use a message
similar to:

#+BEGIN_SRC undefined
  Update foo to v1.1.0
#+END_SRC

Or for multiple packages:

#+BEGIN_SRC undefined
  Update drones

  Update foo to v1.1.0
  Update bar to v1.2.1
#+END_SRC

To update the Epkg package database use the command ~epkg-update~.

* Patching drones

A major reason for using Borg is that you can easily make changes to
the assimilated packages.

Once you have create a commit or multiple related commits you should
usually record these changes in the ~~/.emacs.d~ repository.  Like
when you update a drone by pulling from the upstream repository, you
should do so by creating a "Update DRONE to VERSION" commit.  You
should usually delay the creation of such a commit until the changes
in the drone submodule are "finished".

If your ~~/.emacs.d~ repository is publically available, then you
should extend the commit message to inform others that the submodule,
as present in your configuration, requires commits that are not
available from the upstream repository:

#+BEGIN_SRC undefined
  Update DRONE to VERSION
    from URL-OF-PUBLIC-REPO
#+END_SRC

* Make targets

The following ~make~ targets are available in ~~/.emacs.d/Makefile~.
To use them you have to be in ~~/.emacs.d~ in a shell.

- Command: make help

  This target prints information about the following targets.

- Command: make build

  This target builds all drones.

- Command: make quick

  This target builds /most/ drones.  Excluded are all drones for which
  the Git variable ~submodule.DRONE.build~ is set, assuming that those
  are the drones that take longer to build.

- Command: make lib/DRONE

  This target builds the drone named DRONE.

- Command: make bootstrap

  This target attempts to bootstrap the drones.  Due to limitations of
  ~git submodules~ it is recommended that you don't use this target and
  instead proceed as described in [[*Getting started]].

* Lisp variables

- Variable: borg-drone-directory

  The value of this constant is the directory beneath with drone
  submodules are placed.  The value is set based on the location of
  the ~borg~ library and should not be changed.

- Variable: borg-user-emacs-directory

  The value of this constant is the directory beneath which additional
  per-user Emacs-specific files are placed.  The value is set based on
  the location of the ~borg~ library and should not be changed.  The
  value is usually the same as that of ~user-emacs-directory~, except
  when Emacs is started with ~emacs -q -l /path/to/init.el~.

* Git variables

The values of all Git variables describe here have to be set in the
file ~~/.emacs.d/.gitmodules~.

Because most repositories used to maintain Emacs packages follow some
common-sense conventions, Borg usually does not have to be told how to
build a given drone.  Building is done using ~borg-build~, which in turn
usually does its work using ~borg-update-autoloads~, ~borg-byte-compile~,
and ~borg-makeinfo~.

However some packages don't follow the conventions either because they
are too complex to do so, or for the sake of doing it differently.
But in either case resistance is futile; by using the following
variables you can tell Borg how to build such packages.

- Variable: submodule.DRONE.build-step COMMAND

  This variable instructs ~borg-build~ to build the drone named DRONE
  using COMMAND instead of ~borg-update-autoloads~, ~borg-byte-compile~,
  and ~borg-makeinfo~.  COMMAND can be a shell command or an Emacs lisp
  S-expression.  This variable can be specified multiple times.

  #+BEGIN_SRC undefined
  [submodule "mu4e"]
          build-step = make -C mu4e > /dev/null
          build-step = "(borg-update-autoloads \"mu4e\" (list (expand-file-name \"mu4e\")))"
          ...
  #+END_SRC

  If this variable is set, then all default steps are skipped.
  Therefore if the upstream build process does not cover all steps
  which are normally performed by the Borg build process, then you
  have to invoke some of the Borg steps explicitly.  In the above
  example we do so by calling ~borg-update-autoloads~ with the
  appropriate arguments.

  Also note that just because a package provides a ~Makefile~, you do
  not necessarily have to use it.

- Variable: submodule.DRONE.load-path PATH

  This variable instructs ~borg-initialize~ to add PATH to the ~load-path~
  instead of the directory it would otherwise have added.  Likewise it
  instructs ~borg-byte-compile~ to compile the libraries in that
  directory.  PATH has to be relative to the top-level of the
  repository of the drone named DRONE.  This variable can be specified
  multiple times.

  Normally Borg uses ~lisp/~ as the drone's ~load-path~, if that exists,
  or else the top-level directory.  If this variable is set, then it
  /overrides/ the default location.  Therefore, to /add/ an additional
  directory, you also have to explicitly specify the default
  locaction.

  #+BEGIN_SRC undefined
  [submodule "org"]
          load-path = lisp
          load-path = contrib/lisp
          ...
  #+END_SRC undefined

- Variable: submodule.DRONE.no-compile PATH

  This variable instructs ~borg-byte-compile~ to not compile the library
  at PATH.  PATH has to be relative to the top-level of the repository
  of the drone named DRONE.  This variable can be specified multiple
  times.

  Sometimes a drone comes with an optional library which adds support
  for some other third-party package, which you don't want to use.
  For example ~emacsql~ comes with a PostgreSQL back-end, which is
  implemented in the library ~emacsql-pg.el~, which requires the ~pg~
  package.  The standard Borg collective ~emacs.g~ assimilates ~emacsql~,
  for the sake of the ~epkg~ drone, which only requires the SqLite
  back-end.  To avoid an error about ~pg~ not being available, ~emacs.g~
  instructs Borg to not compile ~emacsql-pg.el~.  (Of course if you want
  to use the PostgreSQL back-end and assimilate ~pg~, then you should
  undo that.)

  #+BEGIN_SRC undefined
    [submodule "emacsql"]
            no-byte-compile = emacsql-pg.el
            ...
  #+END_SRC

- Variable: submodule.DRONE.info-path PATH

  This variable instructs ~borg-initialize~ to add PATH
  ~Info-directory-list~.  PATH has to be relative to the top-level of
  the repository of the drone named DRONE.

- Variable: submodule.DRONE.no-makeinfo PATH

  This variable instructs ~borg-makeinfo~ to not create an Info file for
  the Texinfo file at PATH.  PATH has to be relative to the top-level
  of the repository of the drone named DRONE.  This variable can be
  specified multiple times.

- Variable: submodule.DRONE.disabled true|false

  If the value of this variable is ~true~, then it is skipped by
  ~borg-initialize~.

* Internal functions

- Function: borg-repository drone

  This function returns the top-level of the working tree of the
  submodule named DRONE.

- Function: borg-get drone variable &optional all

  This function returns the value of the Git variable
  ~submodule.DRONE.VARIABLE~ defined in ~~/.emacs.d/.gitmodules~.  If
  optional ALL is non-nil, then it returns all values as a list.

- Function: borg-get-all drone variable

  This function returns all values of the Git variable
  ~submodule.DRONE.VARIABLE~ define in ~~/.emacs.d/.gitmodules~ as a
  list.

- Function: borg-load-path drone

  This function returns the ~load-path~ for the drone named DRONE.

- Function: borg-info-path drone &optional setup

  This function returns the ~Info-directory-list~ for the drone named
  DRONE.

  If optional SETUP is non-nil, then it returns a list of directories
  containing ~texi~ and/or ~info~ files.  Otherwise it returns a list of
  directories containing a file named ~dir~.

- Function: borg-drones

  This function returns a list of all assimilated drones.
